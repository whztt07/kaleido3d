find_program(CLANG NAMES clang clang++)

if (CLANG)
  message(STATUS "clang found at: ${CLANG}")
else ()
  message(WARNING "Could NOT find clang executable.")
endif ()

execute_process(COMMAND ${CLANG} -v ERROR_VARIABLE clang_v)
if("${clang_v}" MATCHES "x86_64")
	set(CLANG64 TRUE)
	if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
		set(LIBCLANG_COMPAT TRUE)
	else()
		set(LIBCLANG_COMPAT FALSE)
	endif()
else()
	set(CLANG64 FALSE)
	if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
		set(LIBCLANG_COMPAT TRUE)
	else()
		set(LIBCLANG_COMPAT FALSE)
	endif()
endif()
string(REGEX MATCH "InstalledDir: .*" CLANG_PATH_LINE "${clang_v}")
string(REGEX MATCH "([C-Z]:|/).*" CLANG_PATH "${CLANG_PATH_LINE}")

#get_filename_component(CLANG_PATH ${CLANG} DIRECTORY)
message(STATUS "Clang Path = ${CLANG_PATH}, Lib Compatibility ${LIBCLANG_COMPAT}")

if(LIBCLANG_COMPAT)
	# guessing include dir and lib dir
	set(CLANG_INCLUDE_DIR_GUESS ${CLANG_PATH}/../include)
	set(CLANG_LIB_DIR ${CLANG_PATH}/../lib)
	find_library(CLANG_LIB NAMES clang libclang
	  PATHS
	  ${CLANG_LIB_DIR})
	find_path(CLANG_INCLUDE_DIR clang-c
	  PATHS ${CLANG_INCLUDE_DIR_GUESS})
	if(CLANG_LIB)
	  message(STATUS "LibClang = ${CLANG_LIB}")
	else()
	  message(WARNING "Could NOT find libclang.")
	endif()
	if(CLANG_INCLUDE_DIR)
	  message(STATUS "LibClang CLANG_INCLUDE_DIR = ${CLANG_INCLUDE_DIR}")
	else()
	  message(WARNING "Could NOT find libclang include dir.")
	endif()
	set(LibClang_FOUND (CLANG_INCLUDE_DIR AND CLANG_LIB))
else()
endif()